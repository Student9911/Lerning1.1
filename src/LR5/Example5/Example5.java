package LR5.Example5;

public class Example5 {
    //класс, у которого есть закрытое целочисленное поле.
    private int a;
    //Значение полю присваивается с помощью открытого метода. Методу аргументом
    //может передаваться целое число
    public void Set(int a) {
        this.a = a;
        //если переданное аргументом методу значение превышает 100, то значением полю присваивается число 100.
        if (a >= 100) {
            this.a = 100;
        }
        //если переданное аргументом методу значение меньше 0, то значением полю присваивается число 0.
        if (a <= 0) {
            this.a = 0;
        }

    }
    // а также метод может вызываться без аргументов.
    // Если методы вызывается без аргументов, то поле
    // получает нулевое значение.
    public void Set() {
        System.out.println("\nМетод Set() без аргумента");
        a = 0;
    }

    public int proverka() {
        return a;
    }
    //конструктор, который работает по тому же принципу что и метод для присваивания значения полю.
    Example5(int a) {
        System.out.println("Example5() конструктор\nкоторый работает по тому же принципу," +
                " что и метод для присваивания значения полю.");
        Set(a);
    }
}

/*5. Напишите программу с классом, у которого есть закрытое целочисленное поле.
 Значение полю присваивается с помощью открытого метода. Методу аргументом
 может передаваться целое число, а также метод может вызываться без аргументов.
 Если методы вызывается без аргументов, то поле получает нулевое значение.
 Если метод вызывается с целочисленным аргументом, то это значение
 присваивается полю. Однако если переданное аргументом методу значение
 превышает 100, то значением полю присваивается число 100. Предусмотрите
 в классе конструктор, который работает по тому же принципу что и
 метод для присваивания значения полю. Также в классе должен быть метод,
 позволяющий проверить значение поля.*/
